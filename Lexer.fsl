{

module Lexer

open Microsoft.FSharp.Text.Lexing
open System
open System.Text

let newline (lexbuf: LexBuffer<_>) = 
  lexbuf.StartPos <- lexbuf.StartPos.NextLine
}

let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')
let digit = ['0'-'9']
let identifier = [^'"' '0'-'9' '(' ')' ' ' '\t' '\n' '\r']

rule tokenstream = parse
// --------------------------
| whitespace	{ tokenstream lexbuf }
| newline	   { newline lexbuf; tokenstream lexbuf }
| '('          { Parser.LeftParen }
| ')'          { Parser.RightParen }
| '\''         { Parser.Apostrophe }
| eof   	      { Parser.EOF }
| ['-']?digit+      { Parser.Digits <| Int32.Parse(String.Concat(lexbuf.Lexeme)) }
| '"' [^'"']* '"'   { let s = String.Concat(lexbuf.Lexeme) in Parser.Text <| s.Substring(1, s.Length - 2) }
| identifier+       { Parser.Identifier <| String.Concat(lexbuf.Lexeme) }
// --------------------------
| _    		   { failwith ("ParseError" + LexBuffer<_>.LexemeString lexbuf) }
